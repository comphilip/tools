diff --git a/frontend/apps/reader/modules/readerhighlight.lua b/frontend/apps/reader/modules/readerhighlight.lua
index a09d51ed..6cb217ad 100644
--- a/frontend/apps/reader/modules/readerhighlight.lua
+++ b/frontend/apps/reader/modules/readerhighlight.lua
@@ -57,12 +57,12 @@ function ReaderHighlight:init()
         -- Used for text selection with dpad/keys
         local QUICK_INDICTOR_MOVE = true
         self.key_events.StopHighlightIndicator = { {Device.input.group.Back}, doc = "Stop non-touch highlight", args = true } -- true: clear highlight selection
-        self.key_events.UpHighlightIndicator = { {"Up"}, doc = "move indicator up", event = "MoveHighlightIndicator", args = {0, -1} }
-        self.key_events.DownHighlightIndicator = { {"Down"}, doc = "move indicator down", event = "MoveHighlightIndicator", args = {0, 1} }
+        self.key_events.UpHighlightIndicator = { {"W"}, {"Up"}, doc = "move indicator up", event = "MoveHighlightIndicator", args = {0, -1} }
+        self.key_events.DownHighlightIndicator = { {"X"}, {"Down"}, doc = "move indicator down", event = "MoveHighlightIndicator", args = {0, 1} }
         -- let FewKeys device can move indicator left
-        self.key_events.LeftHighlightIndicator = { {"Left"}, doc = "move indicator left", event = "MoveHighlightIndicator", args = {-1, 0} }
-        self.key_events.RightHighlightIndicator = { {"Right"}, doc = "move indicator right", event = "MoveHighlightIndicator", args = {1, 0} }
-        self.key_events.HighlightPress = { {"Press"}, doc = "highlight start or end" }
+        self.key_events.LeftHighlightIndicator = { {"A"}, {"Left"}, doc = "move indicator left", event = "MoveHighlightIndicator", args = {-1, 0} }
+        self.key_events.RightHighlightIndicator = { {"D"}, {"Right"}, doc = "move indicator right", event = "MoveHighlightIndicator", args = {1, 0} }
+        self.key_events.HighlightPress = { {"S"}, {"Press"}, doc = "highlight start or end" }
         if Device:hasKeys() then
             self.key_events.QuicklyUpHighlightIndicator = { {"Shift", "Up"}, doc = "quick move indicator up", event = "MoveHighlightIndicator", args = {0, -1, QUICK_INDICTOR_MOVE} }
             self.key_events.QuicklyDownHighlightIndicator = { {"Shift", "Down"}, doc = "quick move indicator down", event = "MoveHighlightIndicator", args = {0, 1, QUICK_INDICTOR_MOVE} }
diff --git a/frontend/ui/widget/dictquicklookup.lua b/frontend/ui/widget/dictquicklookup.lua
index 9fc83800..6086ee71 100644
--- a/frontend/ui/widget/dictquicklookup.lua
+++ b/frontend/ui/widget/dictquicklookup.lua
@@ -899,8 +899,8 @@ function DictQuickLookup:onCloseWidget()
     end
 
     -- NOTE: Drop region to make it a full-screen flash
-    UIManager:setDirty(nil, function()
-        return "flashui", nil
+    UIManager:setDirty(self, function()
+        return "flashui", self.dict_frame.dimen
     end)
 end
 
diff --git a/frontend/cache.lua b/frontend/cache.lua
index 74bb7d69..36452179 100644
--- a/frontend/cache.lua
+++ b/frontend/cache.lua
@@ -175,6 +175,7 @@ function Cache:insert(key, object)
     end
 
     self.cache:set(key, object, object.size)
+    self:memoryPressureCheck()
 
     -- Accounting debugging
     --self:_insertion_stats(key, object.size)
